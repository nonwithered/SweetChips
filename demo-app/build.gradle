apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.versions.compileSdkVersion
    buildToolsVersion rootProject.ext.versions.buildToolsVersion

    defaultConfig {
        applicationId "org.sweetchips.demo.app"
        minSdkVersion rootProject.ext.versions.minSdkVersion
        targetSdkVersion rootProject.ext.versions.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

}

dependencies {
    implementation project(':demo-main')
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "androidx.appcompat:appcompat:${rootProject.ext.versions.appcompat}"
    implementation "androidx.constraintlayout:constraintlayout:${rootProject.ext.versions.constraintlayout}"
    testImplementation "junit:junit:${rootProject.ext.versions.junit}"
    androidTestImplementation "androidx.test.ext:junit:${rootProject.ext.versions.testJunit}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${rootProject.ext.versions.espresso}"
}

if (gradle.ext.existsBuildTarget('plugin-gradle-android')) {
    apply plugin: 'SweetChips'
    SweetChips {
        asmApi = 5 << 16
        addTransform 'Test'
        addTransform 'Temp'
    }
    Test {
        prepare {
            before {
                println 'Test prepare before'
            }
            first 'org.sweetchips.visitors.UncheckcastPrepareClassVisitor'
            after {
                println 'Test prepare after'
            }
        }
        transform {
            before {
                println 'Test transform before'
            }
            first adapt('org.sweetchips.visitors.HideTransformClassNode')
            first 'org.sweetchips.visitors.UncheckcastTransformClassVisitor'
            after {
                println 'Test transform after'
            }
        }
    }
    Temp {
        prepare {
            before {
                println 'Temp prepare before'
            }
            after {
                println 'Temp prepare after'
            }
        }
        transform {
            before {
                println 'Test transform before'
            }
            after {
                println 'Test transform after'
            }
        }
    }
}
