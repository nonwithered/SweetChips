import java.nio.file.Files
import java.nio.file.Paths

def javaSrc = Paths.get("$projectDir", 'src', 'main', 'java').toAbsolutePath()

task clean(type: Delete) {
    delete project.buildDir
}

task testPrepare(type: Exec, dependsOn: clean) {
    [
            ':utility',
            ':visitors',
            ':plugin4gradle',
            ':plugin4gradle:demo',
            ':visitors:demo',
    ].each {
        dependsOn "$it:publish"
    }
    def cp = '.'
    Files.list(Paths.get("$projectDir", 'libs')).each {
        cp += ":${it.toAbsolutePath()}"
    }
    def args = []
    def path = Paths.get("$projectDir", '..', 'build', 'org', 'sweetchips')
    [
            'utility',
            'visitors',
            'visitors-demo',
            'plugin4gradle',
            'plugin4gradle-demo',
    ].each {
        def tmp = path.resolve(Paths.get("$it", '1.0.0', "$it-1.0.0.jar")).toAbsolutePath()
        cp += ":${tmp}"
        args += "${tmp}"
    }
    def cmd = [
            'java',
            '-cp', "$cp",
            'org.sweetchips.plugin4gradle.Launcher'
    ] + args
    try {
        standardInput = Files.newInputStream(Paths.get("$projectDir", 'in.txt'))
    } catch (IOException e) {
        throw new IllegalStateException(e)
    }
    commandLine cmd
}

task testCompile(type: Exec, dependsOn: testPrepare) {
    def d = Paths.get("$projectDir", 'build', 'classes')
    def src = []
    [
            Paths.get('test', 'Test.java'),
            Paths.get('main', 'Main.java'),

    ].each {
        src += "${javaSrc.resolve(it).toAbsolutePath()}"
    }
    def cp = '.'
    def path = Paths.get("$projectDir", '..', 'build', 'org', 'sweetchips')
    [
            'utility',
    ].each {
        def tmp = path.resolve(Paths.get("$it", '1.0.0', "$it-1.0.0.jar")).toAbsolutePath()
        cp += ":${tmp}"
    }
    def cmd = [
            'javac',
            '-cp', "$cp",
            '-d', "${d.toAbsolutePath()}",
    ] + src
    commandLine cmd
    doFirst {
        if (!Files.isDirectory(d)) {
            Files.createDirectories(d)
        }
    }
}

task testTransform(type: Exec, dependsOn: testCompile) {
    def path = Paths.get("$projectDir", 'build', 'libs')
    def cp = '.'
    ['utility', 'visitors', 'visitors-demo'].each {
        def tmp = path.resolve(Paths.get("$it-1.0.0.jar")).toAbsolutePath()
        cp += ":${tmp}"
    }
    standardOutput = System.out
    commandLine 'java',
            '-cp', "$cp",
            'org.sweetchips.visitors.Launcher',
            'build'
}

task testLaunch(type: Exec, dependsOn: testTransform) {
    standardOutput = System.out
    def cp = Paths.get("$projectDir", 'build', 'classes').toAbsolutePath()
    commandLine 'java',
            '-cp', "$cp",
            'main.Main'
}

task testAssemble(type: Exec, dependsOn: testLaunch) {
    def src = []
    [
            Paths.get('main', 'Main.java'),
    ].each {
        src += "${javaSrc.resolve(it).toAbsolutePath()}"
    }
    def cmd = [
            'javac',
            '-cp', 'build/classes:../build/org/sweetchips/utility/1.0.0/utility-1.0.0.jar',
            '-d', 'build/classes',
    ] + src
    commandLine cmd
}