import java.nio.file.Files
import java.util.stream.Collectors

def sep = org.gradle.internal.os.OperatingSystem.current().isWindows() ? ';' : ':'

def javaSrc = projectDir.toPath()
        .resolve('src')
        .resolve('main')
        .resolve('java')
        .resolve('org')
        .resolve('sweetchips')
        .resolve('test')

def proList = [
        ':plugin4gradle',
        ':plugin4gradle:demo',
        ':utility',
        ':visitors',
        ':visitors:demo',
]

def jarList = [
        'plugin4gradle',
        'plugin4gradle-demo',
        'utility',
        'visitors',
        'visitors-demo',
]

def repPath = rootProject.projectDir.toPath()
        .resolve('build')
        .resolve('org')
        .resolve('sweetchips')

def depPath = projectDir.toPath()
        .resolve('libs')

def depFind = { it ->
    repPath
            .resolve("$it")
            .resolve('1.0.0')
            .resolve("$it-1.0.0.jar")
}

def libPath = projectDir.toPath()
        .resolve('build')
        .resolve('libs')

def clsPath = projectDir.toPath()
        .resolve('build')
        .resolve('classes')

task testPrepare(type: Exec, dependsOn: clean) {
    proList.each {
        dependsOn "$it:publish"
    }
    def cp = Files.list(depPath).map {
        "$sep${it.toAbsolutePath()}"
    }.collect(Collectors.joining())
    def args = jarList.stream().map {
        def jar = depFind(it).toAbsolutePath()
        cp += "$sep$jar"
        "$jar"
    }.collect(Collectors.toList())
    def cmd = [
            'java',
            '-cp', "$cp",
            'org.sweetchips.plugin4gradle.Launcher'
    ] + args
    commandLine cmd
    def input
    doFirst {
        standardOutput = System.out
        errorOutput = System.err
        input = new ByteArrayInputStream('''
build/libs
-
-
org.sweetchips.visitors.ReplaceAsmClassVisitor
'''.bytes)
        standardInput = input
    }
    doLast {
        input.close()
    }
}

task testCompile(type: Exec, dependsOn: testPrepare) {
    def src = Files.list(javaSrc).map {
        "${it.toAbsolutePath()}"
    }.collect(Collectors.toList())
    def cp = jarList.stream().map {
        def jar = depFind(it)
        "$sep${jar.toAbsolutePath()}"
    }.collect(Collectors.joining())
    def cmd = [
            'javac',
            '-cp', "$cp",
            '-d', "${clsPath.toAbsolutePath()}",
    ] + src
    commandLine cmd
    doFirst {
        if (!Files.isDirectory(clsPath)) {
            Files.createDirectories(clsPath)
        }
    }
    doFirst {
        standardOutput = System.out
        errorOutput = System.err
    }
}

task testTransform(type: Exec, dependsOn: testCompile) {
    def cp = jarList.stream().map {
        "$sep${libPath.resolve("$it-1.0.0.jar").toAbsolutePath()}"
    }.collect(Collectors.joining())
    commandLine 'java',
            '-cp', "$cp",
            'org.sweetchips.visitors.Launcher',
            'build'
    doFirst {
        standardOutput = System.out
        errorOutput = System.err
    }
}

task testLaunch(type: Exec, dependsOn: testTransform) {
    commandLine 'java',
            '-cp', "${clsPath.toAbsolutePath()}",
            'org.sweetchips.test.Main'
    doFirst {
        standardOutput = System.out
        errorOutput = System.err
    }
}
