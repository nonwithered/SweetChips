import java.nio.file.Files
import java.util.stream.Collectors

def sep = org.gradle.internal.os.OperatingSystem.current().isWindows() ? ';' : ':'

def javaSrc = projectDir.toPath()
        .resolve('src')
        .resolve('main')
        .resolve('java')
        .resolve('org')
        .resolve('sweetchips')
        .resolve('test')

def proList = [
        ':plugin4gradle',
        ':plugin4gradle:demo',
        ':utility',
        ':visitors',
        ':visitors:demo',
        ':const-sweeper',
]

def jarList = [
        'plugin4gradle',
        'plugin4gradle-demo',
        'utility',
        'visitors',
        'visitors-demo',
        'const-sweeper',
]

def repPath = rootProject.projectDir.toPath()
        .resolve('build')
        .resolve('org')
        .resolve('sweetchips')

def depPath = projectDir.toPath()
        .resolve('libs')

def depFind = { it ->
    repPath
            .resolve("$it")
            .resolve('1.0.0')
            .resolve("$it-1.0.0.jar")
}

def libPath = projectDir.toPath()
        .resolve('build')
        .resolve('libs')

def libFind = { it ->
    libPath.resolve("$it-1.0.0.jar")
}

def clsPath = projectDir.toPath()
        .resolve('build')
        .resolve('classes')
        .resolve('java')
        .resolve('main')

def inputPath = projectDir.toPath()
        .resolve('build')
        .resolve('input')

def outputPath = projectDir.toPath()
        .resolve('build')
        .resolve('output')

def tempPath = projectDir.toPath()
        .resolve('build')
        .resolve('intermediates')
        .resolve('transforms')

def scriptPath = projectDir.toPath()
        .resolve('src')
        .resolve('main')
        .resolve('groovy')

def rawClasspath = {
    def cp = jarList.stream().map {
        "$sep${depFind(it).toAbsolutePath()}"
    }.collect(Collectors.joining())
    Files.list(depPath).forEach {
        cp += "$sep${it.toAbsolutePath()}"
    }
    cp
}

def allClasspath = {
    def cp = jarList.stream().map {
        "$sep${libFind(it).toAbsolutePath()}"
    }.collect(Collectors.joining())
    Files.list(depPath).filter {
        !"${it.fileName}".startsWith('asm')
    }.forEach {
        cp += "$sep${it.toAbsolutePath()}"
    }
    cp
}

def libClasspath = {
    def cp = jarList.stream().map {
        "$sep${libFind(it).toAbsolutePath()}"
    }.collect(Collectors.joining())
    cp
}

task testInit(type: Copy, dependsOn: clean) {
    proList.each {
        dependsOn "$it:publish"
    }
    jarList.forEach {
        from "${depFind(it).toAbsolutePath()}"
    }
    into "$libPath"
    doFirst {
        if (!Files.exists(libPath)) {
            Files.createDirectories(libPath)
        }
    }
}

task testReplace(type: Exec, dependsOn: testInit) {
    commandLine 'java',
            '-cp', "${rawClasspath()}",
            'org.sweetchips.visitors.Launcher',
            "$libPath"
    doFirst {
        standardOutput = System.out
        errorOutput = System.err
    }
}

task testCompile(type: Exec, dependsOn: testReplace) {
    def src = Files.list(javaSrc).map {
        "${it.toAbsolutePath()}"
    }.collect(Collectors.toList())
    def cmd = [
            'javac',
            '-cp', "${allClasspath()}",
            '-d', "${clsPath.toAbsolutePath()}",
    ] + src
    commandLine cmd
    doFirst {
        if (!Files.exists(clsPath)) {
            Files.createDirectories(clsPath)
        }
    }
    doFirst {
        standardOutput = System.out
        errorOutput = System.err
    }
}

task testPrepare(type: Copy, dependsOn: testCompile) {
    from "$clsPath"
    into "${inputPath.resolve('test').resolve('0')}"
    doFirst {
        if (!Files.exists(inputPath.resolve('test').resolve('0'))) {
            Files.createDirectories(inputPath.resolve('test').resolve('0'))
        }
    }
}

task testTransform(type: Exec, dependsOn: testPrepare) {
    def args = jarList.stream().map {
        "${libFind(it).toAbsolutePath()}"
    }.collect((Collectors.toList()))
    def cmd = [
            'java',
            '-cp', "${libClasspath()}",
            'org.sweetchips.plugin4gradle.Launcher',
            "$inputPath",
            "$outputPath",
            "$tempPath",
            "$scriptPath",
            '_',
            "${new StringJoiner('_', '', '').add('test')}"
    ] + args
    commandLine cmd
    doFirst {
        standardOutput = System.out
        errorOutput = System.err
    }
    doFirst {
        if (!Files.exists(outputPath)) {
            Files.createDirectories(outputPath)
        }
        if (!Files.exists(tempPath)) {
            Files.createDirectories(tempPath)
        }
    }
}

task testDemo(type: Exec, dependsOn: testTransform) {
    commandLine 'java',
            '-cp', "${outputPath.resolve('test').resolve('0').toAbsolutePath()}",
            'org.sweetchips.test.Main'
    doFirst {
        standardOutput = System.out
        errorOutput = System.err
    }
}
